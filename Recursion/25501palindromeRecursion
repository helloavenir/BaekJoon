import sys
# 테스트케이스 수 입력받음
t = int(sys.stdin.readline())

# 주어진 팰린드롬 판별 재귀함수
# 입력된 문자열 s, 맨 왼쪽 문자 인덱스 l, 맨 오른쪽 문자 인덱스 r
def recursion(s, l, r):
  # 함수 내 변수가 아닌 전역변수 cnt를 사용할 것을 밝힘
  # 수행 횟수 카운트
  global cnt
  cnt += 1
    # 문자의 개수가 홀수 개인 문자열은 양쪽 비교가 끝나면 l과 r이 같아질 때가 옴
    # 문자의 개수가 짝수 개인 문자열은 비교가 끝나면 l이 r보다 커질 때가 옴
    # 순회를 무사히 마치면 1 반환(끝남)
  if l >= r: return 1
  # 맨 왼쪽과 맨 오른쪽 문자를 비교해 다르면 0 반환(끝남) => 팰린드롬 아님
  elif s[l] != s[r]: return 0
  # 그 외의 경우라면 위의 작업을 반복해서 실행하는데, 
  # 왼쪽 인덱스는 1씩 커지며 문자열의 오른쪽으로 한 칸씩 이동하고,
  # 오른쪽 인덱스는 1씩 작아지며 문자열의 왼쪽으로 한 칸씩 이동하면서
  # 그 두 문자가 위의 두 조건을 체크함
  # 팰린드롬일 때는 1을 반환하며 끝나게 되고,
  # 팰린드롬이 아닐 때는 0을 반환하며 끝나게 됨.
  else: return recursion(s, l+1, r-1)

# 위의 재귀함수 활용해 팰린드롬 판별, 0이나 1 반환
def isPalindrome(s):
  # 인자 : 입력할 문자열 s, 왼쪽 문자 인덱스, 오른쪽 문자 인덱스
  return recursion(s, 0, len(s)-1)


# 입력받은 테스트 케이스 횟수 동안 수행
for _ in range(t):
  # 카운터 초기화
  cnt = 0
  # 팰린드롬 판별 함수 실행해 0과 1로 판별해 반환하고, 
  # 판별 재귀함수 시행횟수(cnt) 반환
  print(isPalindrome(sys.stdin.readline().rstrip()), cnt)

  
